---

docker:

  repositories:

    # Section for docker-ce package, added after docker 17.06 released.
    # @see https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/
    # .list extension will be added automatically for the filename parameter.
    - key:
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        url: https://download.docker.com/linux/ubuntu/gpg
      repository: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      filename: docker
      state: present

    # This repository is outdated since docker 17.06 is released
    # @see https://docs.docker.com/engine/installation/linux/ubuntulinux/
    # (documentation redirected to new one)
    - key:
        id: 58118E89F3A912897C070ADBF76221572C52609D
        keyserver: hkp://p80.pool.sks-keyservers.net:80
      repository: deb [arch=amd64] https://apt.dockerproject.org/repo ubuntu-{{ ansible_distribution_release }} main
      filename: docker
      state: absent

  packages:
    # Main Docker package
    - package: docker-ce
      state: latest
    # Added starting from Docker 18.09 (added for updates via apt)
    - package: docker-ce-cli
      state: latest
    # Added starting from Docker 18.09 (added for updates via apt)
    - package: containerd.io
      state: latest

    # Below are outdated packages
    - package: lxc-docker
      state: absent
    - package: docker
      state: absent
    - package: docker-engine
      state: absent
    - package: docker.io
      state: absent

  pips:
    - package: docker
      state: latest
    - package: docker-py
      state: absent

  networks:
    - name: docknet
      driver: bridge
    - name: docknet-overlay
      driver: overlay
      attachable: True
      encrypted: True

  swarm:
    # This is Docker Swarm settings, so it would be executed only on `manager` host

    # Ansible hostname for the Docker Swarm manager node that would execute all Swarm commands
    manager:

    # Name of the Docker Swarm managers Ansible host group in your inventory
    manager_group:

    # Docker Swarm secrets. Use format:
    #
    #  some-secret:
    #    data: some-data
    #    state: present
    #    labels:
    #      some: label
    #
    #  some-secret-to-remove:
    #    state: absent
    #
    # Remember you can use vault-encrypted data. For details
    # @see https://docs.ansible.com/ansible/latest/user_guide/vault.html#use-encrypt-string-to-create-encrypted-variables-to-embed-in-yaml
    secrets: {}

  compose:
    path: /usr/local/bin
    version: 1.23.2
    sha256: 4d618e19b91b9a49f36d041446d96a1a0a067c676330a4f25aca6bbd000de7a9

  config:
    # When this configuration parameter contain version as string, for example the latest known stable version strings:
    #     18.03.1~ce-0~ubuntu
    #     18.06.1~ce~3-0~ubuntu
    #     5:18.09.3~3-0~ubuntu-xenial
    # it will pin your Docker engine to specified version (by creating special file /etc/apt/preferences.d/docker-ce)
    # By default this is disabled, as this Ansible role trying to install Docker engine close to it's official guide.
    pin_docker_engine_to_version: no

    # Same as `pin_docker_engine_to_version`, but for Docker CLI package (Docker and Docker CLI separated since
    # version 18.09)
    pin_docker_cli_to_version: no

    # Use this settings to create /etc/docker/daemon.json crossplatform docker daemon config file.
    # Set only settings that you really need! Commented keys below given for quick reference.
    # @see https://docs.docker.com/engine/reference/commandline/dockerd/#/daemon-configuration-file
    json:
#      authorization-plugins: []
#      dns: []
#      dns-opts: []
#      dns-search: []
#      exec-opts: []
#      storage-driver: ""
#      storage-opts: []
#      labels: []
#      log-driver: ""
#      mtu: 0
#      pidfile: ""
#      graph: ""
#      cluster-store: ""
#      cluster-advertise: ""
#      debug: True
#      hosts: []
#      log-level: ""
#      tlsverify: True
#      tlscacert: ""
#      tlscert: ""
#      tlskey: ""
#      group: ""
#      default-ulimits: {}
#      bridge: ""
#      fixed-cidr: ""
#      raw-logs: False
#      registry-mirrors: []
#      insecure-registries: []
#      disable-legacy-registry: False


  containers: []
    # Examples:
    #
    #
    # To recreate redis container:
    #
    # - name: myredis
    #   image: redis
    #   command: redis-server --appendonly yes
    #   state: present
    #   recreate: yes
    #   exposed_ports:
    #     - 6379
    #   volumes_from:
    #     - mydata
    #
    #
    # Some Alpine-based container:
    #
    # Note that you cannot run any container based on alpine image, if you try:
    #     sudo docker create --name alpine alpine:3.3
    # you get:
    #     Error response from daemon: No command specified
    # Because it have no ENTRYPOINT no CMD.
    # So thats why we use "state: absent" here.
    #
    # - name: alpine
    #   image: alpine
    #   state: absent
    #   ports: []
    #
    #
    # Busybox-based container
    #
    # - name: busybox
    #   image: busybox
    #   state: started
    #   detach: False
    #   ports: []

  users: []
    # List of Linux usernames to be added to docker group
    # Example:
    #   - myuser
    #   - anotheruser
    #
    # Note that current version of user is lack of removing user from group functionality, so this can not be done here.
    # @see https://github.com/ansible/ansible/issues/11024
    #
    # Also note that user must logout/login after adding to group or use `newgrp docker` command to groups permissons be
    # reloaded.
    #
    # Warning: The docker group (or the group specified with -G) is root-equivalent;
    # see [Docker Daemon Attack Surface details]
    # (https://docs.docker.com/engine/security/security/#/docker-daemon-attack-surface)
    # and this blogpost on [Why we don't let non-root users run Docker in CentOS, Fedora, or RHEL]
    # (https://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/)
