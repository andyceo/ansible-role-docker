---

## Example containers configurations. Port mapping are synced with it's example vhosts configuration.
## All this containers are assumed that there is user defined docker network named "docknet", and each
## container was created with --net=docknet

docker:
  containers:

    # UI for Docker (formely known as DockerUI)
    # @see https://hub.docker.com/r/uifd/ui-for-docker/
    - name: uifd
      enabled: no
      image: uifd/ui-for-docker
      tag: 0.11.0-beta
      state: started
      hostname: uifd
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - "9000:9000"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      privileged: True

    # phpMemcacheAdmin
    # @see https://hub.docker.com/r/jacksoncage/phpmemcachedadmin/
    - name: phpmemcachedadmin
      enabled: no
      image: jacksoncage/phpmemcachedadmin
      state: started
      hostname: phpmemcachedadmin
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - "30080:80"
      volumes:
        - /data/phpmemcachedadmin/logs:/var/log/nginx
        - /data/phpmemcachedadmin/config:/phpmemcachedadmin

    # Gitlab Community Edition
    # @see https://hub.docker.com/r/gitlab/gitlab-ce/
    - name: gitlab
      enabled: no
      image: gitlab/gitlab-ce
      tag: 8.10.2-ce.0
      state: started
      hostname: gitlab.example.com
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - "31443:443"
        - "31080:80"
        - "22:22"
      volumes:
        - /data/gitlab/config:/etc/gitlab
        - /data/gitlab/logs:/var/log/gitlab
        - /data/gitlab/data:/var/opt/gitlab

    # Gitlab runner
    # @see https://hub.docker.com/r/gitlab/gitlab-runner/
    # You can create as many runners as you want, adjust suffix respectively.
    # Do not forget to register runner in Gitlab after startup!
    - name: gitlab-runner-01
      enabled: no
      image: gitlab/gitlab-runner
      tag: ubuntu-v1.1.3
      state: started
      hostname: gitlab-runner-01
      detach: True
      restart_policy: always
      net: docknet
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /data/gitlab-runner-01/config:/etc/gitlab-runner
        - /data/gitlab-runner-01/home:/home/gitlab-runner

    # Memcached
    # @see https://hub.docker.com/_/memcached/
    - name: memcached
      enabled: no
      image: memcached
      tag: 1.4.28
      state: started
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - 11211:11211

    # Redis
    # @see https://hub.docker.com/r/_/redis/
    - name: redis
      enabled: yes
      image: redis
      tag: 3.2.1
      state: started
      command: redis-server /usr/local/etc/redis/redis.conf
      hostname: redis-master
      detach: True
      restart_policy: always
      net: docknet
      volumes:
        - /data/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf:ro
        - /data/redis/data:/data:rw
        - /data/redis/logs:/var/log/redis:rw
      ports:
        - 6379:6379

    # Private Docker Registry
    # @see https://hub.docker.com/_/registry/
    # @see https://docs.docker.com/registry/
    - name: registry
      enabled: yes
      image: registry
      tag: 2.5.0
      state: started
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - "5000:5000"
      env:
        REGISTRY_STORAGE_DELETE_ENABLED: True

    # Docker Registry Frontend
    # @see https://hub.docker.com/r/konradkleine/docker-registry-frontend/
    - name: docker-registry-frontend
      enabled: no
      image: konradkleine/docker-registry-frontend
      tag: v2
      state: started
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - "32080:80"
      env:
        ENV_DOCKER_REGISTRY_HOST: registry.example.com
        ENV_DOCKER_REGISTRY_PORT: 5000

    # Jenkins
    # @see https://hub.docker.com/r/jenkinsci/jenkins/
    # There is "official" jenkins 1.x at: https://hub.docker.com/_/jenkins/
    - name: jenkins
      enabled: no
      image: jenkinsci/jenkins
      tag: 2.15
      state: started
      detach: yes
      restart_policy: always
      net: docknet
      ports:
        - "33080:8080"
        - "50000:50000"
      volumes:
        - /data/jenkins:/var/jenkins_home
      env:
        JAVA_OPTS: -Dhudson.footerURL=http://jenkins.example.com-Djava.awt.headless=true -Dhudson.security.csrf.requestfield=crumb

    # MySQL
    # @see https://hub.docker.com/_/mysql/
    # Note that environment variable MYSQL_ROOT_PASSWORD is mandatory.
    - name: mysql
      enabled: no
      image: mysql
      tag: 5.7.13
      state: started
      detach: yes
      restart_policy: always
      net: docknet
      ports:
        - "3306:3306"
      volumes:
        - /data/mysql/conf:/etc/mysql/conf.d:ro
        - /data/mysql/data:/var/lib/mysql:rw
        - /data/mysql/logs:/var/log/mysql:rw
      env:
        MYSQL_ROOT_PASSWORD: secret_password

    # phpMyAdmin
    # @see https://hub.docker.com/r/phpmyadmin/phpmyadmin/
    - name: phpmyadmin
      enabled: no
      image: phpmyadmin/phpmyadmin
      tag: 4.6.3-1
      state: started
      detach: yes
      restart_policy: always
      net: docknet
      ports:
        - "34080:80"
      volumes:
        - /data/phpmyadmin/sessions:/sessions:rw
      env:
        PMA_HOST: mysql.example.com

    # Redmine
    # @see https://hub.docker.com/_/redmine/
    - name: redmine
      enabled: no
      image: redmine
      tag: 3.2.1
      state: started
      detach: yes
      restart_policy: always
      net: docknet
      ports:
        - "35000:3000"
      volumes:
        - /data/redmine/files:/usr/src/redmine/files
#        - /data/redmine/config:/usr/src/redmine/config
      env:
        MYSQL_PORT_3306_TCP: 3306
        MYSQL_ENV_MYSQL_USER: redmine
        MYSQL_ENV_MYSQL_PASSWORD: secret_password
        MYSQL_ENV_MYSQL_DATABASE: redmine
      links:
        - mysql

    # InfluxDB
    # @see https://hub.docker.com/r/tutum/influxdb/
    - name: influxdb
      enabled: no
      image: influxdb
      tag: 1.0.0-beta2
      state: started
      hostname: influxdb
      detach: True
      restart_policy: always
      net: docknet
      expose:
        - 8083
        - 8086
        - 8089
      volumes:
        - /datas03/docker/influxdb/conf/influxdb.conf:/etc/influxdb/influxdb.conf:ro
        - /datas03/docker/influxdb/data:/var/lib/influxdb:rw

    # Grafana
    # @see https://hub.docker.com/r/grafana/grafana/
    # Note that file /data/grafana/conf should exist on host before start this task! Or grafana did not start.
    - name: grafana
      enabled: no
      image: grafana/grafana
      tag: 3.1.0
      state: started
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - "36000:3000"
      env:
        GF_SERVER_ROOT_URL: "https://grafana.example.com"
        GF_SECURITY_ADMIN_PASSWORD: secret_password
      volumes:
        - /data/grafana/data:/var/lib/grafana
        - /data/grafana/log:/var/log/grafana
        - /data/grafana/conf:/etc/grafana

    # Nginx
    # @see https://hub.docker.com/_/nginx/
    # You should copy config files before create container!
    # You should place virtual host configs in nginx/conf.d directory
    - name: nginx
      enabled: yes
      image: nginx
      tag: 1.10.1
      state: started
      hostname: nginx
      detach: True
      restart_policy: always
      net: docknet
      ports:
        - 80:80
        - 443:443
      volumes:
        - /data/ssl:/ssl:ro
        - /data/nginx/htpasswds:/etc/nginx/htpasswds:ro
        - /data/nginx/conf.d:/etc/nginx/conf.d:ro
        - /data/nginx/fastcgi_params:/etc/nginx/fastcgi_params:ro
        - /data/nginx/proxy_headers:/etc/nginx/proxy_headers:ro
        - /data/nginx/proxy_params:/etc/nginx/proxy_params:ro
        - /data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        - /data/nginx/default-content:/usr/share/nginx/html:ro
        - /data/nginx/cache:/var/cache/nginx:rw
        - /data/nginx/logs:/var/log/nginx:rw
