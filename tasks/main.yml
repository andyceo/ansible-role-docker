---

- name: Install dependencies for Ansible apt* modules
  command: apt-get -y install python-apt aptitude
  register: docker_apt_dependencies_installed
  changed_when: "'is already the newest version' not in docker_apt_dependencies_installed.stdout"
  tags:
    - docker-repository-key
    - docker-repository

- name: Add docker main repository key and remove outdated repositories keys
  apt_key:
    id: "{{ item.key.id }}"
    url: "{{ item.key.url|default(none) }}"
    state: "{{ item.state }}"
  with_items: "{{ docker.repositories }}"
  tags:
    - docker-repository-key
    - docker-repository

- name: Install python-pycurl to make apt_repository module workable
  apt: pkg=python-pycurl
  tags:
    - docker-repository

- name: Remove outdated docker repositories and add current one
  apt_repository:
    filename: "{{ item.filename|default('docker') }}"
    repo: "{{ item.repository }}"
    state: "{{ item.state }}"
    update_cache: yes
  with_items: "{{ docker.repositories|sort(attribute='state') }}"
  tags:
    - docker-repository

- name: Remove outdated docker packages if they exists (data remain) and install current docker package
  apt:
    pkg: "{{ item.package }}"
    state: "{{ item.state }}"
    update_cache: yes
    cache_valid_time: 3600
  with_items: "{{ docker.packages|sort(attribute='state') }}"
  notify: docker-start
  tags:
    - docker-package

- meta: flush_handlers

- name: Remove default Docker OS-independent json configuration file if nothing to add to it
  file:
    path=/etc/docker/daemon.json
    state=absent
  when: "not docker.config.json"

- name: Generate default Docker OS-independent json configuration file
  template:
    src=daemon.json.j2
    dest=/etc/docker/daemon.json
    mode=0600
    owner=root
    group=root
  when: "docker.config.json"
  notify: docker-restart

- name: Create Docker user-defined networks
  shell: docker network create {{ item.name }}
  with_items: "{{ docker.data.networks }}"
  ignore_errors: True
  register: docker_network_create_result
  changed_when: "docker_network_create_result|succeeded and 'already exists' not in docker_network_create_result.stderr"
  tags:
    - docker-networks

- meta: flush_handlers

- name: Get current docker-compose version
  shell: docker-compose --version | sed -n 's|.* \([0-9.a-z\-]*\), .*|\1|p'
  args:
    chdir: "{{ docker.data.docker_compose_path }}"
    removes: "docker-compose"
  register: docker_compose_version
  changed_when: false
  tags:
    - docker-compose

#- dbg: msg="{{ docker_compose_version }}"

- name: Install/update/actualize docker-compose utility
  shell: curl -L https://github.com/docker/compose/releases/download/{{ docker.data.docker_compose_version }}/docker-compose-`uname -s`-`uname -m` > docker-compose && chmod +x docker-compose
  args:
    chdir: "{{ docker.data.docker_compose_path }}"
  when: docker_compose_version.stdout is not defined or docker_compose_version.stdout | version_compare(docker.data.docker_compose_version, '!=')
  tags:
    - docker-compose

- name: Install pip package to operate with python modules
  apt: name=python-pip state=present

- name: Install docker-py to make ansible module docker workable
  pip: name=docker-py

- name: Pre-create directories for data volumes
  command: mkdir -p -m 0755 {{ item.1.split(':')[0] }}
    creates={{ item.1.split(':')[0] }}
  with_subelements:
     - "{{ docker.containers | selectattr('volumes', 'defined') | list }}"
     - volumes

- name: Orchestrate containers
  docker:
    name: "{{ item.name }}"
    image: "{{ item.image }}:{{ item.tag|default('latest') }}"
    command: "{{ item.command|default('') }}"
    state: "{{ item.state }}"
    hostname: "{{ item.hostname|default('') }}"
    detach: "{{ item.detach|default(False) }}"
    restart_policy: "{{ item.restart_policy|default('no') }}"
    net: "{{ item.net|default('') }}"
    expose: "{{ item.expose|default([]) }}"
    ports: "{{ item.ports|default([]) }}"
    volumes: "{{ item.volumes|default([]) }}"
    links: "{{ item.links|default([]) }}"
    env: "{{ item.env|default({}) }}"
    memory_limit: "{{ item.memory_limit|default(0) }}"
    privileged: "{{ item.privileged|default(False) }}"
    log_driver: "{{ item.log_driver|default('json-file') }}"
  with_items: "{{ docker.containers }}"
  when: item.enabled
  tags:
    - docker-orchestrate

# This is the example task with all params that we can use in Ansible 1.5.4 (Ubuntu 14.04)
#- name: Example task that do something with containers
#  docker:
#    image=
#    state=started
#    command=
#    detach=yes
#    domainname
#    publish_all_ports
#    expose=
#    hostname=
#    links=redis:myredis
#    name=
#    volumes=
#    volumes_from=
